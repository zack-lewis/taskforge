generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL") 
}

model authorization {
  id                                     Int      @id @default(autoincrement())
  team                                   Int?
  user                                   Int?
  project                                Int?
  role                                   Int?
  project_authorization_projectToproject project? @relation("authorization_projectToproject", fields: [project], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_project_id")
  role_authorization_roleTorole          role?    @relation("authorization_roleTorole", fields: [role], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_role_id")
  team_authorization_teamToteam          team?    @relation("authorization_teamToteam", fields: [team], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_team_id")
  user_authorization_userTouser          user?    @relation("authorization_userTouser", fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_user_id")

  @@index([project], map: "auth_project_id_idx")
  @@index([role], map: "auth_role_id_idx")
  @@index([team], map: "auth_team_id_idx")
  @@index([user], map: "auth_user_id_idx")
}

model note {
  id                   Int       @id @default(autoincrement())
  task                 Int
  user                 Int
  timestamp            DateTime  @db.DateTime(0)
  supercedes           Int?
  data                 String?   @db.Text
  task_note_taskTotask task      @relation("note_taskTotask", fields: [task], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "note_task_id")
  user_note_userTouser user      @relation("note_userTouser", fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "note_user_id")
  note                 note?     @relation("noteTonote", fields: [supercedes], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "supercedes_note_id")
  other_note           note[]    @relation("noteTonote")

  @@index([task], map: "note_task_id_idx")
  @@index([user], map: "note_user_id_idx")
  @@index([supercedes], map: "supercedes_note_id_idx")
}

model project {
  id                                           Int             @id @default(autoincrement())
  name                                         String          @db.VarChar(45)
  primary_team                                 Int?
  authorization_authorization_projectToproject authorization[] @relation("authorization_projectToproject")
  team                                         team?           @relation(fields: [primary_team], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "project_primary_team")
  task_task_projectToproject                   task[]          @relation("task_projectToproject")

  @@index([primary_team])
}

model role {
  id                                     Int             @id @default(autoincrement())
  name                                   String          @db.VarChar(45)
  view                                   Int             @default(0) @db.TinyInt
  edit                                   Int             @default(0) @db.TinyInt
  assign_team                            Int             @default(0) @db.TinyInt
  authorization_authorization_roleTorole authorization[] @relation("authorization_roleTorole")
}

model task {
  id                            Int       @id @default(autoincrement())
  project                       Int?
  user                          Int?
  team                          Int?
  name                          String?   @db.VarChar(45)
  description                   String?   @db.VarChar(45)
  due_date                      DateTime? @db.DateTime(0)
  started_date                  DateTime? @db.DateTime(0)
  completed_date                DateTime? @db.DateTime(0)
  note_note_taskTotask          note[]    @relation("note_taskTotask")
  project_task_projectToproject project?  @relation("task_projectToproject", fields: [project], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "task_project_id")
  team_task_teamToteam          team?     @relation("task_teamToteam", fields: [team], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "task_team_id")
  user_task_userTouser          user?     @relation("task_userTouser", fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "task_user_id")

  @@index([project], map: "task_project_id_idx")
  @@index([team], map: "task_team_id_idx")
  @@index([user], map: "task_user_id_idx")
}

model team {
  id                                     Int             @id @default(autoincrement())
  name                                   String?         @db.VarChar(45)
  lead                                   Int?
  authorization_authorization_teamToteam authorization[] @relation("authorization_teamToteam")
  project                                project[]
  task_task_teamToteam                   task[]          @relation("task_teamToteam")
  user_team_leadTouser                   user?           @relation("team_leadTouser", fields: [lead], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "lead_user_id")
  user_user_team_idToteam                user[]          @relation("user_team_idToteam")

  @@index([lead], map: "lead_idx")
}

model user {
  id                                     Int             @id @default(autoincrement())
  username                               String?         @db.VarChar(45)
  email                                  String?         @db.VarChar(45)
  full_name                              String?         @db.VarChar(45)
  team_id                                Int?
  github_login                           String?         @db.VarChar(45)
  google_login                           String?         @db.VarChar(45)
  authorization_authorization_userTouser authorization[] @relation("authorization_userTouser")
  note_note_userTouser                   note[]          @relation("note_userTouser")
  task_task_userTouser                   task[]          @relation("task_userTouser")
  team_team_leadTouser                   team[]          @relation("team_leadTouser")
  team_user_team_idToteam                team?           @relation("user_team_idToteam", fields: [team_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_team_id")

  @@index([team_id])
}
