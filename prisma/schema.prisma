generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model authorization {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  teamId    String?  @db.ObjectId
  userId    String?  @db.ObjectId
  projectId String?  @db.ObjectId
  roleId    String?  @db.ObjectId
  project   project? @relation(fields: [projectId], references: [id])
  role      role?    @relation(fields: [roleId], references: [id])
  team      team?    @relation(fields: [teamId], references: [id])
  user      user?    @relation(fields: [userId], references: [id])
}

model note {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  taskId    String   @db.ObjectId
  userId    String   @db.ObjectId
  timestamp DateTime
  data      String?
  task      task     @relation(fields: [taskId], references: [id])
  user      user     @relation(fields: [userId], references: [id])
}

model project {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  primary_teamId String?         @db.ObjectId
  team           team?           @relation(fields: [primary_teamId], references: [id])
  authorizations authorization[]
  tasks          task[]
}

model role {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  view           Boolean         @default(false)
  edit           Boolean         @default(false)
  assign_team    Boolean         @default(false)
  authorizations authorization[]
}

model task {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  projectId      String?   @db.ObjectId
  userId         String?   @db.ObjectId
  teamId         String?   @db.ObjectId
  nameId         String?   @db.ObjectId
  description    String?
  due_date       DateTime?
  started_date   DateTime?
  completed_date DateTime?
  project        project?  @relation(fields: [projectId], references: [id])
  team           team?     @relation(fields: [teamId], references: [id])
  user           user?     @relation(fields: [userId], references: [id])
  notes          note[]
}

model team {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  leadId         String?         @db.ObjectId
  authorizations authorization[]
  projects       project[]
  tasks          task[]
  users          user[]
}

model user {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  username       String          @unique
  email          String          @unique
  full_name      String?
  teamId         String?         @db.ObjectId
  github_login   String?
  google_login   String?
  team_lead      Boolean
  team           team?           @relation(fields: [teamId], references: [id])
  authorizations authorization[]
  notes          note[]
  tasks          task[]
}
